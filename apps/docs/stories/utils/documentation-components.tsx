import { Source } from '@storybook/blocks';
import dedent from 'ts-dedent';

export const ExportedParts = ({ tags, component, compact }: { tags: string[]; component: string, compact: boolean }) => {
  return (
    <ul>
      {tags.map(text => {
        const splitText = text.split(':');
        const part = splitText[0];
        const description = splitText[1];
        return (
          <li key={part}>
            <strong>{part}</strong> {description ? '- ' + description : ''}
            <ExportedPartUsage component={component} tag={part} compact={compact} />
          </li>
        );
      })}
    </ul>
  );
};

export const ExportedPartUsage = ({ tag, component, compact }: { tag: string; component: string, compact?: boolean }) => (
  <Source
    dark
    language="css"
    code={dedent(`
      ${component || '*'}::part(${tag}) ${!compact ? `{
        color: red;
      }` : '{}'}
    `)}
  />
);

export const SummaryElement = (props: { title: string, children: any }) => {
  const { title, children } = props;

  return (
    <details style={{
      fontFamily: 'var(--bs-font-sans-serif)',
      color: '#2E3438',
      fontSize: '14px',
      cursor: 'pointer'
    }}>
      <summary>
        <b>{title}</b>
      </summary>

      {children}
    </details>
  );
};

// If there's only one role, return <code>{role}</code>, 
// otherwise return <code>{role1} or {role2}</code>
const getComponentRole = ({ actions, entity, identification }: AuthorizationProps) => {
  const getCodeForRole = (role: string) => {
    return <code>{`${role}:${entity}:${identification}`}</code>
  };

  if (actions.length === 1) {
    return getCodeForRole(actions[0]);
  }

  return (
    <>{getCodeForRole(actions[0])} or {getCodeForRole(actions[1])}</>
  );
};

export const AuthTokenDescription = () => (
  <>
    <strong>Create Access Token API</strong >: These tokens are generated by your backend services using the {' '}
    <a href="https://docs.justifi.tech/api-spec#tag/API-Credentials/operation/CreateAccessToken">
      Auth Token API
    </a>.
  </>
)

const WebComponentTokenDescription = ({ actions, entity, identification }: AuthorizationProps) => {
  return (
    <>
      <strong> Web Component Token</strong >: These tokens are generated by your backend services using the {' '}
      <a href="https://docs.justifi.tech/api-spec#tag/Web-Component-Tokens/operation/CreateWebComponentToken">
        Web Component Tokens API
      </a>.
      Each token can be scoped to perform a set number of actions and is active for 60 minutes.
      When creating a web component token for this specific component you'll need to use the role
      {getComponentRole({ actions, entity, identification })}
      (use the <code>{identification}</code> you also pass as a separate prop).
    </>
  )
}

interface AuthorizationProps {
  actions: 'read' | 'write';
  entity: 'tokenize' | 'business' | 'account' | 'checkout';
  identification: 'client_id' | 'business_id' | 'checkout_id' | 'account_id';
}

export const Authorization = ({ actions, entity, identification }: AuthorizationProps) => {

  return (
    <>
      <h1>Authorization</h1>
      <hr />
      <p>Authorization is performed by passing a web component token as <code>auth-token</code></p>
      <ul>
        <li>
          <WebComponentTokenDescription
            actions={actions}
            entity={entity}
            identification={identification}
          />
        </li>
      </ul>
    </>
  );
}
